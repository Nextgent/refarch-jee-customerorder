node {
    def app

    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm
    }

    stage('Compile code') {

      withMaven(maven: 'maven') {
        sh 'cd CustomerOrderServicesProject ; mvn clean package'
      }
    }
    
      
    stage('Build image') {
    
        app = docker.build("${params.namespace}/customer-order-services")
    }

    stage('Push image') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        docker.withRegistry('https://mycluster:8500', 'icp-credentials') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }
    }
    
    stage('Deploy application') {
        /* Update deployment to use latest image */
      sh "sed -i 's/customer-order-services:liberty/customer-order-services:${env.BUILD_NUMBER}/g' tutorial/DevOps/deployment.yaml "
      
      /* Update make sure deployment uses the namespace we pushed the image to */
      sh "sed -i 's|/websphere/customer-order-services|/${params.namespace}/customer-order-services|g' tutorial/DevOps/deployment.yaml "

      sh '''
        #!/bin/bash
        
        
        # Create configmaps if they dont exist
        for map in ldap orderdb inventorydb
        do
          kubectl get configmap $map || kubectl create configmap $map --from-env-file=tutorial/tutorialConfigFiles/${map}.env
        done
        
        # Apply the deployment
        kubectl apply -f tutorial/DevOps/deployment.yaml
      '''
    }
}



