{{ if .Values.db2.populate }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}
  labels:
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: {{ .Chart.Name }}
spec:
  template:
    spec:
      containers:
      - name: db2-express
        image: ibmcom/db2express-c:latest
        imagePullPolicy: IfNotPresent
        command: ["bash", "-c" ]
        args:
          - >
              echo "Configuring DB2 driver to talk to Customer Order Services Application's DB" &&
              /home/db2inst1/sqllib/bin/db2cli writecfg add -dsn order -database ORDERDB -host {{ .Values.db2.host }} -port {{ .Values.db2.port }} &&

              echo "Validating previous configuration" &&
              /home/db2inst1/sqllib/bin/db2cli validate -dsn order &&

              echo "Grabbing SQL files to populate ORDERDB" &&
              cd /tmp &&
              wget {{ .Values.db2.populate_sql_scripts_location }}/createOrderDB_job.sql &&
              wget {{ .Values.db2.populate_sql_scripts_location }}/initialDataSet_job.sql &&

              echo "Executing SQL files against ORDERDB" &&
              /home/db2inst1/sqllib/bin/db2cli execsql -dsn order -user {{ .Values.db2.user }} -passwd {{ .Values.db2.password }} -inputsql createOrderDB_job.sql &&
              /home/db2inst1/sqllib/bin/db2cli execsql -dsn order -user {{ .Values.db2.user }} -passwd {{ .Values.db2.password }} -inputsql initialDataSet_job.sql &&
              echo
              echo "[SUCCESS]: Cusomer Order Services application's DB has been successfully populated."
        ports:
        - name: http
          containerPort: 50000
        env:
        - name: LICENSE
          value: "accept"
        - name: DB2INST1_PASSWORD
          value: "justApass"
      restartPolicy: Never
{{ end }}
